import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { useMemo, useState } from "react";
import { Image } from "react-native";
import { SvgXml } from "react-native-svg";
import { radius } from "../../design-system/index.js";
import { Skeleton } from "./Skeleton.js";
function getImage(data) {
    if (data.startsWith("data:image/svg+xml;base64,")) {
        const image = globalThis.atob(data.replace("data:image/svg+xml;base64,", ""));
        return { image, type: "xml" };
    }
    if (data.startsWith("data:image/")) {
        return { image: data, type: "image" };
    }
    if (data.startsWith("<svg")) {
        return { image: data, type: "xml" };
    }
    return { image: data, type: "url" };
}
export const RNImage = (props) => {
    const { data, size, color, placeholder } = props;
    const [loading, setLoading] = useState(true);
    if (!data) {
        return null;
    }
    const { image, type } = useMemo(() => getImage(data), [data]);
    switch (type) {
        case "url":
        case "image":
            return (_jsxs(_Fragment, { children: [loading && (_jsx(Skeleton, { theme: props.theme, style: { width: size, height: size } })), _jsx(Image, { source: { uri: image }, loadingIndicatorSource: { uri: placeholder }, width: size, height: size, onLoadStart: () => setLoading(true), onLoadEnd: () => setLoading(false), style: [
                            { borderRadius: radius.md, display: loading ? "none" : "flex" },
                        ] })] }));
        case "xml":
            return _jsx(SvgXml, { xml: image, width: size, height: size, color: color });
        default:
            return null;
    }
};
//# sourceMappingURL=RNImage.js.map