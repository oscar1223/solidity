import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from "react";
import { Platform, StyleSheet, View } from "react-native";
import { SvgXml } from "react-native-svg";
import { parseTheme } from "../../../core/design-system/CustomThemeProvider.js";
import { genericWalletIcon } from "../../../core/utils/socialIcons.js";
import { radius, spacing } from "../../design-system/index.js";
import { useActiveWallet } from "../../hooks/wallets/useActiveWallet.js";
import { useConnect } from "../../hooks/wallets/useConnect.js";
import { getDefaultWallets } from "../../wallets/defaultWallets.js";
import { Header } from "../components/Header.js";
import { ThemedButtonWithIcon } from "../components/button.js";
import { Spacer } from "../components/spacer.js";
import { ThemedText } from "../components/text.js";
import { ThemedView } from "../components/view.js";
import { TW_ICON } from "../icons/svgs.js";
import { ExternalWalletsList } from "./ExternalWalletsList.js";
import { InAppWalletUI, OtpLogin } from "./InAppWalletUI.js";
/**
 * A component that allows the user to connect their wallet.
 *
 * it renders the same UI as the [`ConnectButton`](https://portal.thirdweb.com/react/v4/components/ConnectButton) component's modal - but directly on the page instead of being in a modal.
 *
 * It only renders UI if wallet is not connected
 * @example
 * ```tsx
 * <ConnectEmbed
 *    client={client}
 * />
 * ```
 * @param props -
 * The props for the `ConnectEmbed` component.
 *
 * Refer to the [`ConnectEmbedProps`](https://portal.thirdweb.com/references/typescript/v5/ConnectEmbedProps) type for more details
 * @component
 */
export function ConnectEmbed(props) {
    const theme = parseTheme(props.theme);
    const wallet = useActiveWallet();
    const adaptedProps = {
        ...props,
        connectModal: { ...props },
    };
    return wallet ? null : (_jsx(ConnectModal, { ...adaptedProps, theme: theme, containerType: "embed" }));
}
export function ConnectModal(props) {
    const { theme, client, containerType, accountAbstraction, onConnect } = props;
    const connectMutation = useConnect({
        client,
        accountAbstraction,
        onConnect: (wallet) => {
            props.onClose?.();
            onConnect?.(wallet);
        },
    });
    const wallets = props.wallets || getDefaultWallets(props);
    const [modalState, setModalState] = useState({ screen: "base" });
    const inAppWallet = wallets.find((wallet) => wallet.id === "inApp");
    const externalWallets = wallets.filter((wallet) => wallet.id !== "inApp");
    const showBranding = props.connectModal?.showThirdwebBranding !== false;
    let content;
    switch (modalState.screen) {
        case "otp": {
            content = (_jsxs(_Fragment, { children: [_jsx(Header, { theme: theme, onClose: props.onClose, containerType: containerType, onBack: () => setModalState({ screen: "base" }) }), _jsx(Spacer, { size: "xl" }), _jsx(View, { style: {
                            flexDirection: "column",
                            gap: spacing.md,
                            paddingHorizontal: containerType === "modal" ? spacing.lg : 0,
                        }, children: _jsx(OtpLogin, { auth: modalState.auth, wallet: modalState.wallet, client: client, setScreen: setModalState, theme: theme, connectMutation: connectMutation }) }), containerType === "modal" ? (_jsx(View, { style: { flex: 1 } })) : (_jsx(Spacer, { size: "md" }))] }));
            break;
        }
        case "external_wallets": {
            content = (_jsxs(_Fragment, { children: [_jsx(Header, { theme: theme, onClose: props.onClose, containerType: containerType, onBack: () => setModalState({ screen: "base" }) }), _jsx(Spacer, { size: "lg" }), _jsx(ExternalWalletsList, { theme: theme, externalWallets: externalWallets, client: client, connectMutation: connectMutation, containerType: containerType })] }));
            break;
        }
        default: {
            content = (_jsxs(_Fragment, { children: [_jsx(Header, { theme: theme, onClose: props.onClose, containerType: containerType }), inAppWallet ? (_jsxs(_Fragment, { children: [containerType === "modal" ? (_jsx(View, { style: { flex: 1 } })) : (_jsx(Spacer, { size: "lg" })), _jsxs(View, { style: {
                                    flexDirection: "column",
                                    gap: spacing.md,
                                    paddingHorizontal: containerType === "modal" ? spacing.lg : 0,
                                }, children: [_jsx(InAppWalletUI, { wallet: inAppWallet, setScreen: setModalState, client: client, theme: theme, connectMutation: connectMutation }), externalWallets.length > 0 ? (_jsxs(_Fragment, { children: [_jsx(OrDivider, { theme: theme }), _jsx(ThemedButtonWithIcon, { theme: theme, icon: genericWalletIcon, title: "Connect a wallet", onPress: () => setModalState({ screen: "external_wallets" }) })] })) : null] }), containerType === "modal" ? (_jsx(View, { style: { flex: 1 } })) : (_jsx(Spacer, { size: "md" }))] })) : externalWallets.length > 0 ? (_jsxs(_Fragment, { children: [_jsx(Spacer, { size: "lg" }), _jsx(View, { style: {
                                    flex: 1,
                                }, children: _jsx(ExternalWalletsList, { theme: theme, externalWallets: externalWallets, client: client, connectMutation: connectMutation, containerType: containerType }) })] })) : null] }));
        }
    }
    return (_jsxs(ThemedView, { theme: theme, style: containerType === "modal"
            ? styles.modalContainer
            : styles.embedContainer, children: [content, showBranding && _jsx(PoweredByThirdweb, { theme: theme })] }));
}
function OrDivider({ theme }) {
    return (_jsxs(View, { style: {
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "center",
            gap: spacing.lg,
        }, children: [_jsx(View, { style: {
                    flex: 1,
                    height: 1,
                    backgroundColor: theme.colors.borderColor,
                } }), _jsx(ThemedText, { theme: theme, style: { color: theme.colors.secondaryText }, children: "OR" }), _jsx(View, { style: {
                    flex: 1,
                    height: 1,
                    backgroundColor: theme.colors.borderColor,
                } })] }));
}
function PoweredByThirdweb({ theme }) {
    return (_jsxs(View, { style: {
            flexDirection: "row",
            justifyContent: "center",
            alignItems: "center",
            gap: spacing.xs,
            paddingBottom: Platform.OS === "android" ? spacing.md : spacing.lg,
        }, children: [_jsx(ThemedText, { theme: theme, type: "subtext", children: "Powered by" }), _jsx(SvgXml, { xml: TW_ICON, width: 22, height: 22, style: { marginBottom: -2 }, color: theme.colors.secondaryText }), _jsx(ThemedText, { theme: theme, type: "subtext", style: { fontWeight: "600" }, children: "thirdweb" })] }));
}
const styles = StyleSheet.create({
    modalContainer: {
        flex: 1,
        width: "100%",
        flexDirection: "column",
        borderTopLeftRadius: radius.lg,
        borderTopRightRadius: radius.lg,
    },
    embedContainer: {
        flex: 1,
        width: "100%",
        flexDirection: "column",
        backgroundColor: "transparent",
    },
});
//# sourceMappingURL=ConnectModal.js.map