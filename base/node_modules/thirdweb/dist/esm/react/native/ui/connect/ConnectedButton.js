import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { StyleSheet, View } from "react-native";
import { parseTheme } from "../../../core/design-system/CustomThemeProvider.js";
import { useConnectedWalletDetails } from "../../../core/utils/wallet.js";
import { fontSize, spacing } from "../../design-system/index.js";
import { useActiveWalletChain } from "../../hooks/wallets/useActiveWalletChain.js";
import { Skeleton } from "../components/Skeleton.js";
import { WalletImage } from "../components/WalletImage.js";
import { ThemedButton } from "../components/button.js";
import { ThemedText } from "../components/text.js";
export function ConnectedButton(props) {
    const theme = parseTheme(props.theme);
    const { account, wallet } = props;
    const walletChain = useActiveWalletChain();
    const { ensAvatarQuery, addressOrENS, balanceQuery } = useConnectedWalletDetails(props.client, walletChain, account, props.detailsButton?.displayBalanceToken);
    return (_jsx(ThemedButton, { theme: theme, onPress: () => {
            props.openModal();
        }, style: {
            paddingHorizontal: spacing.md,
            paddingVertical: spacing.smd,
        }, children: _jsxs(View, { style: styles.row, children: [_jsx(WalletImage, { theme: theme, size: 40, wallet: wallet, ensAvatar: ensAvatarQuery.data }), _jsxs(View, { style: styles.col, children: [_jsx(ThemedText, { theme: theme, type: "defaultSemiBold", style: {
                                color: theme.colors.primaryButtonText,
                            }, children: addressOrENS }), balanceQuery.data ? (_jsxs(ThemedText, { theme: theme, type: "subtext", style: {
                                fontSize: fontSize.sm,
                            }, children: [Number(balanceQuery.data.displayValue).toFixed(3), " ", balanceQuery.data?.symbol] })) : (_jsx(Skeleton, { theme: theme, style: { width: 80, height: 16 }, color: theme.colors.secondaryText }))] })] }) }));
}
const styles = StyleSheet.create({
    row: {
        flexDirection: "row",
        flex: 1,
        gap: spacing.md,
        alignItems: "center",
    },
    col: {
        flexDirection: "column",
        gap: spacing.xxs,
    },
});
//# sourceMappingURL=ConnectedButton.js.map