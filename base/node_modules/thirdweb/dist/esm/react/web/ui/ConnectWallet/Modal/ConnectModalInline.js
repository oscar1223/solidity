"use client";
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { Cross2Icon } from "@radix-ui/react-icons";
import { useCustomTheme } from "../../../../core/design-system/CustomThemeProvider.js";
import { iconSize, radius, shadow, } from "../../../../core/design-system/index.js";
import { WalletUIStatesProvider } from "../../../providers/wallet-ui-states-provider.js";
import { canFitWideModal } from "../../../utils/canFitWideModal.js";
import { DynamicHeight } from "../../components/DynamicHeight.js";
import { CrossContainer } from "../../components/Modal.js";
import { IconButton } from "../../components/buttons.js";
import { StyledDiv } from "../../design-system/elements.js";
import { modalMaxWidthCompact, modalMaxWidthWide, wideModalMaxHeight, } from "../constants.js";
import { ConnectModalContent } from "./ConnectModalContent.js";
import { useSetupScreen } from "./screen.js";
/**
 * @internal
 */
export const ConnectModalInline = (props) => {
    const modalSize = !canFitWideModal() || props.wallets.length === 1 ? "compact" : props.size;
    return (_jsx(WalletUIStatesProvider, { theme: props.theme, isOpen: true, children: _jsx(ConnectModalInlineContent, { className: props.className, size: modalSize, meta: props.meta, welcomeScreen: props.welcomeScreen, wallets: props.wallets, accountAbstraction: props.accountAbstraction, auth: props.auth, chain: props.chain, client: props.client, connectLocale: props.connectLocale, isEmbed: props.isEmbed, localeId: props.localeId, onConnect: props.onConnect, recommendedWallets: props.recommendedWallets, showAllWallets: props.showAllWallets, chains: props.chains, walletConnect: props.walletConnect }) }));
};
function ConnectModalInlineContent(props) {
    const screenSetup = useSetupScreen({
        size: props.size,
        welcomeScreen: props.welcomeScreen,
        wallets: props.wallets,
    });
    const content = (_jsxs(_Fragment, { children: [_jsx(ConnectModalContent, { shouldSetActive: true, screenSetup: screenSetup, setModalVisibility: () => {
                    // noop
                }, isOpen: true, onClose: () => {
                    // no op
                }, accountAbstraction: props.accountAbstraction, auth: props.auth, chain: props.chain, client: props.client, connectLocale: props.connectLocale, size: props.size, meta: props.meta, welcomeScreen: props.welcomeScreen, isEmbed: props.isEmbed, localeId: props.localeId, onConnect: props.onConnect, recommendedWallets: props.recommendedWallets, showAllWallets: props.showAllWallets, wallets: props.wallets, chains: props.chains, walletConnect: props.walletConnect }), _jsx(CrossContainer, { children: _jsx(IconButton, { type: "button", "aria-label": "Close", children: _jsx(Cross2Icon, { width: iconSize.md, height: iconSize.md, style: {
                            color: "inherit",
                        } }) }) })] }));
    return (_jsx(ConnectModalInlineContainer, { className: props.className, style: {
            height: props.size === "compact" ? "auto" : wideModalMaxHeight,
            maxWidth: props.size === "compact" ? modalMaxWidthCompact : modalMaxWidthWide,
            ...props.style,
        }, children: props.size === "compact" ? (_jsxs(DynamicHeight, { children: [" ", content, " "] })) : (content) }));
}
const ConnectModalInlineContainer = /* @__PURE__ */ StyledDiv((_) => {
    const theme = useCustomTheme();
    return {
        background: theme.colors.modalBg,
        color: theme.colors.primaryText,
        transition: "background 0.2s ease",
        borderRadius: radius.xl,
        width: "100%",
        boxSizing: "border-box",
        boxShadow: shadow.lg,
        position: "relative",
        border: `1px solid ${theme.colors.borderColor}`,
        lineHeight: "normal",
        overflow: "hidden",
        fontFamily: theme.fontFamily,
        "& *::selection": {
            backgroundColor: theme.colors.primaryText,
            color: theme.colors.modalBg,
        },
    };
});
//# sourceMappingURL=ConnectModalInline.js.map