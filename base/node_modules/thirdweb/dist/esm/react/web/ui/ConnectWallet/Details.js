"use client";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import styled from "@emotion/styled";
import { ChevronRightIcon, ExitIcon, PaperPlaneIcon, PinBottomIcon, PlusIcon, TextAlignJustifyIcon, } from "@radix-ui/react-icons";
import { useQuery } from "@tanstack/react-query";
import { useContext, useEffect, useState } from "react";
import { getContract } from "../../../../contract/contract.js";
import { isContractDeployed } from "../../../../utils/bytecode/is-contract-deployed.js";
import { CustomThemeProvider, useCustomTheme, } from "../../../core/design-system/CustomThemeProvider.js";
import { fontSize, iconSize, media, radius, spacing, } from "../../../core/design-system/index.js";
import { useChainFaucets, useChainIconUrl, useChainName, } from "../../../core/hooks/others/useChainQuery.js";
import { SetRootElementContext } from "../../../core/providers/RootElementContext.js";
import { hasSmartAccount } from "../../../core/utils/isSmartWallet.js";
import { useConnectedWalletDetails } from "../../../core/utils/wallet.js";
import { useActiveAccount } from "../../hooks/wallets/useActiveAccount.js";
import { useActiveWallet } from "../../hooks/wallets/useActiveWallet.js";
import { useActiveWalletChain } from "../../hooks/wallets/useActiveWalletChain.js";
import { useDisconnect } from "../../hooks/wallets/useDisconnect.js";
import { useSwitchActiveWalletChain } from "../../hooks/wallets/useSwitchActiveWalletChain.js";
import { ChainIcon } from "../components/ChainIcon.js";
import { CopyIcon } from "../components/CopyIcon.js";
import { Img } from "../components/Img.js";
import { Modal } from "../components/Modal.js";
import { Skeleton } from "../components/Skeleton.js";
import { Spacer } from "../components/Spacer.js";
import { Spinner } from "../components/Spinner.js";
import { WalletImage } from "../components/WalletImage.js";
import { Container, Line } from "../components/basic.js";
import { Button, IconButton } from "../components/buttons.js";
import { Link, Text } from "../components/text.js";
import { fadeInAnimation } from "../design-system/animations.js";
import { StyledButton } from "../design-system/elements.js";
import { MenuButton, MenuLink } from "./MenuButton.js";
import { NetworkSelectorContent, } from "./NetworkSelector.js";
import { onModalUnmount } from "./constants.js";
import { CoinsIcon } from "./icons/CoinsIcon.js";
import { FundsIcon } from "./icons/FundsIcon.js";
import { GenericWalletIcon } from "./icons/GenericWalletIcon.js";
import { OutlineWalletIcon } from "./icons/OutlineWalletIcon.js";
import { SmartWalletBadgeIcon } from "./icons/SmartAccountBadgeIcon.js";
import { getConnectLocale } from "./locale/getConnectLocale.js";
import { LazyBuyScreen } from "./screens/Buy/LazyBuyScreen.js";
import { BuyTxHistory } from "./screens/Buy/tx-history/BuyTxHistory.js";
import { ManageWalletScreen } from "./screens/ManageWalletScreen.js";
import { PrivateKey } from "./screens/PrivateKey.js";
import { ReceiveFunds } from "./screens/ReceiveFunds.js";
import { SendFunds } from "./screens/SendFunds.js";
import { ViewFunds } from "./screens/ViewFunds.js";
import { WalletConnectReceiverScreen } from "./screens/WalletConnectReceiverScreen.js";
const TW_CONNECTED_WALLET = "tw-connected-wallet";
const LocalhostChainId = 1337;
/**
 * @internal
 */
export const ConnectedWalletDetails = (props) => {
    const { connectLocale: locale, client } = props;
    const setRootEl = useContext(SetRootElementContext);
    const activeWallet = useActiveWallet();
    const activeAccount = useActiveAccount();
    const walletChain = useActiveWalletChain();
    const { ensAvatarQuery, addressOrENS, balanceQuery } = useConnectedWalletDetails(client, walletChain, activeAccount, props.detailsButton?.displayBalanceToken);
    function closeModal() {
        setRootEl(null);
    }
    function openModal() {
        setRootEl(_jsx(DetailsModal, { client: client, locale: locale, detailsModal: props.detailsModal, theme: props.theme, supportedTokens: props.supportedTokens, closeModal: closeModal, onDisconnect: props.onDisconnect, chains: props.chains, displayBalanceToken: props.detailsButton?.displayBalanceToken }));
    }
    const isNetworkMismatch = props.chain && walletChain && walletChain.id !== props.chain.id;
    if (props.detailsButton?.render) {
        return (
        // biome-ignore lint/a11y/useKeyWithClickEvents: ok
        _jsx("div", { onClick: openModal, children: _jsx(props.detailsButton.render, {}) }));
    }
    if (props.chain && isNetworkMismatch) {
        return (_jsx(SwitchNetworkButton, { style: props.switchButton?.style, className: props.switchButton?.className, switchNetworkBtnTitle: props.switchButton?.label, targetChain: props.chain, connectLocale: locale }));
    }
    return (_jsxs(WalletInfoButton, { type: "button", className: `${TW_CONNECTED_WALLET} ${props.detailsButton?.className || ""}`, style: props.detailsButton?.style, "data-test": "connected-wallet-details", onClick: openModal, children: [ensAvatarQuery.data ? (_jsx(Img, { src: ensAvatarQuery.data, width: iconSize.lg, height: iconSize.lg, style: {
                    borderRadius: radius.sm,
                }, client: client })) : activeWallet?.id ? (_jsx(WalletImage, { size: iconSize.lg, id: activeWallet.id, client: client })) : (_jsx(GenericWalletIcon, { size: iconSize.lg })), _jsxs(Container, { flex: "column", gap: "xxs", children: [addressOrENS ? (_jsx(Text, { size: "sm", color: "primaryText", weight: 500, className: `${TW_CONNECTED_WALLET}__address`, children: addressOrENS })) : (_jsx(Skeleton, { height: fontSize.sm, width: "88px" })), balanceQuery.data ? (_jsxs(Text, { className: `${TW_CONNECTED_WALLET}__balance`, size: "xs", weight: 500, children: [Number(balanceQuery.data.displayValue).toFixed(3), " ", balanceQuery.data.symbol] })) : (_jsx(Skeleton, { height: fontSize.xs, width: "82px" }))] })] }));
};
function DetailsModal(props) {
    const [screen, setScreen] = useState("main");
    const { disconnect } = useDisconnect();
    const [isOpen, setIsOpen] = useState(true);
    const { client, locale } = props;
    const walletChain = useActiveWalletChain();
    const activeAccount = useActiveAccount();
    const { ensAvatarQuery, addressOrENS, balanceQuery } = useConnectedWalletDetails(client, walletChain, activeAccount, props.displayBalanceToken);
    const activeWallet = useActiveWallet();
    const chainIconQuery = useChainIconUrl(walletChain);
    const chainNameQuery = useChainName(walletChain);
    const chainFaucetsQuery = useChainFaucets(walletChain);
    const disableSwitchChain = !activeWallet?.switchChain;
    function closeModal() {
        setIsOpen(false);
        onModalUnmount(() => {
            props.closeModal();
        });
    }
    function handleDisconnect(info) {
        setIsOpen(false);
        props.closeModal();
        props.onDisconnect(info);
    }
    const networkSwitcherButton = (_jsxs(MenuButton, { type: "button", disabled: disableSwitchChain, onClick: () => {
            setScreen("network-switcher");
        }, "data-variant": "primary", children: [_jsx("div", { style: {
                    display: "flex",
                    alignItems: "center",
                    position: "relative",
                }, children: !chainIconQuery.isLoading ? (_jsx(ChainIcon, { chainIconUrl: chainIconQuery.url, size: iconSize.md, active: true, client: client })) : (_jsx(Skeleton, { height: iconSize.md, width: iconSize.md })) }), chainNameQuery.isLoading ? (_jsx(Skeleton, { height: "16px", width: "200px" })) : (_jsx(Text, { color: "primaryText", multiline: true, children: chainNameQuery.name || `Unknown chain #${walletChain?.id}` })), _jsx(StyledChevronRightIcon, { width: iconSize.sm, height: iconSize.sm, style: {
                    flexShrink: 0,
                    marginLeft: "auto",
                } })] }));
    let content = (_jsxs("div", { children: [_jsx(Spacer, { y: "xl" }), _jsxs(Container, { px: "lg", flex: "column", center: "x", children: [ensAvatarQuery.data ? (_jsx(Img, { src: ensAvatarQuery.data, width: iconSize.xxl, height: iconSize.xxl, style: {
                            borderRadius: radius.lg,
                        }, client: client })) : activeWallet?.id ? (_jsx(WalletImage, { size: iconSize.xxl, id: activeWallet.id, client: client })) : (_jsx(GenericWalletIcon, { size: iconSize.xxl })), _jsx(Spacer, { y: "md" }), _jsx(ConnectedToSmartWallet, { client: props.client, connectLocale: locale }), (activeWallet?.id === "embedded" || activeWallet?.id === "inApp") && (_jsx(InAppWalletUserInfo, { client: props.client })), _jsxs("div", { style: {
                            display: "flex",
                            gap: spacing.xxs,
                            alignItems: "center",
                            transform: "translateX(10px)",
                        }, "data-test": "connected-wallet-address", "data-address": activeAccount?.address, children: [_jsx(Text, { color: "primaryText", weight: 500, size: "md", children: addressOrENS }), _jsx(IconButton, { style: {
                                    padding: "3px",
                                }, "data-test": "copy-address", children: _jsx(CopyIcon, { text: activeAccount?.address || "", tip: locale.copyAddress, side: "top" }) })] }), _jsx(Spacer, { y: "xxs" }), _jsxs(Text, { weight: 500, size: "sm", children: [balanceQuery.data ? (Number(balanceQuery.data.displayValue).toFixed(3)) : (_jsx(Skeleton, { height: "1em", width: "100px" })), " ", balanceQuery.data?.symbol, " "] })] }), _jsx(Spacer, { y: "lg" }), _jsx(Container, { px: "lg", children: _jsxs(Container, { style: {
                        display: "grid",
                        gridTemplateColumns: "1fr 1fr 1fr",
                        gap: spacing.xs,
                    }, children: [_jsxs(Button, { variant: "outline", style: {
                                fontSize: fontSize.sm,
                                display: "flex",
                                gap: spacing.xs,
                                alignItems: "center",
                                padding: spacing.sm,
                            }, onClick: () => {
                                setScreen("send");
                            }, children: [_jsx(Container, { color: "secondaryText", flex: "row", center: "both", children: _jsx(PaperPlaneIcon, { width: iconSize.sm, height: iconSize.sm, style: {
                                            transform: "translateY(-10%) rotate(-45deg) ",
                                        } }) }), locale.send] }), _jsxs(Button, { variant: "outline", style: {
                                fontSize: fontSize.sm,
                                display: "flex",
                                gap: spacing.xs,
                                alignItems: "center",
                                padding: spacing.sm,
                            }, onClick: () => {
                                setScreen("receive");
                            }, children: [_jsxs(Container, { color: "secondaryText", flex: "row", center: "both", children: [_jsx(PinBottomIcon, { width: iconSize.sm, height: iconSize.sm }), " "] }), locale.receive, " "] }), _jsxs(Button, { variant: "outline", style: {
                                fontSize: fontSize.sm,
                                display: "flex",
                                gap: spacing.xs,
                                alignItems: "center",
                                padding: spacing.sm,
                            }, onClick: () => {
                                setScreen("buy");
                            }, children: [_jsx(Container, { color: "secondaryText", flex: "row", center: "both", children: _jsx(PlusIcon, { width: iconSize.sm, height: iconSize.sm }) }), locale.buy] })] }) }), _jsx(Spacer, { y: "md" }), _jsxs(Container, { px: "md", children: [_jsxs(Container, { flex: "column", style: {
                            gap: "1px",
                        }, children: [networkSwitcherButton, _jsxs(MenuButton, { onClick: () => {
                                    setScreen("pending-tx");
                                }, style: {
                                    fontSize: fontSize.sm,
                                }, children: [_jsx(TextAlignJustifyIcon, { width: iconSize.md, height: iconSize.md }), _jsx(Container, { flex: "row", gap: "xs", center: "y", children: _jsx(Text, { color: "primaryText", children: locale.transactions }) })] }), _jsxs(MenuButton, { onClick: () => {
                                    setScreen("view-funds");
                                }, style: {
                                    fontSize: fontSize.sm,
                                }, children: [_jsx(CoinsIcon, { size: iconSize.md }), _jsx(Text, { color: "primaryText", children: "View Funds" })] }), _jsxs(MenuButton, { onClick: () => {
                                    setScreen("manage-wallet");
                                }, style: {
                                    fontSize: fontSize.sm,
                                }, children: [_jsx(OutlineWalletIcon, { size: iconSize.md }), _jsx(Text, { color: "primaryText", children: "Manage Wallet" })] }), (props.detailsModal?.showTestnetFaucet ?? false) &&
                                (chainFaucetsQuery.faucets.length > 0 ||
                                    walletChain?.id === LocalhostChainId) && (_jsxs(MenuLink, { href: chainFaucetsQuery.faucets ? chainFaucetsQuery.faucets[0] : "#", target: "_blank", as: "a", style: {
                                    textDecoration: "none",
                                    color: "inherit",
                                }, children: [_jsx(Container, { flex: "row", center: "both", color: "secondaryText", children: _jsx(FundsIcon, { size: iconSize.md }) }), locale.requestTestnetFunds] })), props.detailsModal?.footer && (_jsx(props.detailsModal.footer, { close: closeModal }))] }), _jsx(Spacer, { y: "md" })] }), props.detailsModal?.hideDisconnect !== true && (_jsxs(Container, { children: [_jsx(Line, {}), _jsx(Spacer, { y: "sm" }), _jsx(Container, { px: "md", children: _jsxs(MenuButton, { "data-variant": "danger", type: "button", onClick: () => {
                                if (activeWallet && activeAccount) {
                                    disconnect(activeWallet);
                                    handleDisconnect({
                                        account: activeAccount,
                                        wallet: activeWallet,
                                    });
                                }
                            }, children: [_jsx(ExitIcon, { width: iconSize.md, height: iconSize.md }), _jsx(Text, { color: "primaryText", children: locale.disconnectWallet })] }) }), _jsx(Spacer, { y: "sm" })] }))] }));
    if (screen === "pending-tx") {
        content = (_jsx(BuyTxHistory, { isBuyForTx: false, isEmbed: false, onBack: () => setScreen("main"), client: client, onDone: closeModal }));
    }
    if (screen === "network-switcher") {
        content = (_jsx(NetworkSelectorContent
        // add currently connected chain to the list of chains if it's not already in the list
        , { 
            // add currently connected chain to the list of chains if it's not already in the list
            chains: walletChain &&
                props.chains.find((c) => c.id === walletChain.id) === undefined
                ? [walletChain, ...props.chains]
                : props.chains, closeModal: closeModal, networkSelector: props.detailsModal?.networkSelector, onBack: () => {
                setScreen("main");
            }, connectLocale: locale, client: client }));
    }
    else if (screen === "view-funds") {
        content = (_jsx(ViewFunds, { supportedTokens: props.supportedTokens, onBack: () => {
                setScreen("main");
            }, client: client }));
    }
    else if (screen === "private-key") {
        content = (_jsx(PrivateKey, { theme: props.theme, onBack: () => {
                setScreen("manage-wallet");
            }, wallet: activeWallet, client: client }));
    }
    else if (screen === "manage-wallet") {
        content = (_jsx(ManageWalletScreen, { onBack: () => {
                setScreen("main");
            }, locale: locale, closeModal: closeModal, client: client, setScreen: setScreen }));
    }
    else if (screen === "wallet-connect-receiver") {
        content = (_jsx(WalletConnectReceiverScreen, { onBack: () => {
                setScreen("manage-wallet");
            }, chains: props.chains, client: client }));
    }
    // send funds
    else if (screen === "send") {
        content = (_jsx(SendFunds, { supportedTokens: props.supportedTokens, onBack: () => {
                setScreen("main");
            }, client: client, connectLocale: locale }));
    }
    // receive funds
    else if (screen === "receive") {
        content = (_jsx(ReceiveFunds, { walletId: activeWallet?.id, onBack: () => {
                setScreen("main");
            }, client: client, connectLocale: locale }));
    }
    // thirdweb pay
    else if (screen === "buy") {
        content = (_jsx(LazyBuyScreen, { isEmbed: false, client: client, onBack: () => setScreen("main"), supportedTokens: props.supportedTokens, onViewPendingTx: () => setScreen("pending-tx"), connectLocale: locale, payOptions: props.detailsModal?.payOptions || {}, theme: typeof props.theme === "string" ? props.theme : props.theme.type, onDone: closeModal }));
    }
    return (_jsx(CustomThemeProvider, { theme: props.theme, children: _jsx(Modal, { size: "compact", open: isOpen, setOpen: (_open) => {
                if (!_open) {
                    closeModal();
                }
            }, children: content }) }));
}
const WalletInfoButton = /* @__PURE__ */ StyledButton((_) => {
    const theme = useCustomTheme();
    return {
        all: "unset",
        background: theme.colors.connectedButtonBg,
        border: `1px solid ${theme.colors.borderColor}`,
        padding: `${spacing.sm} ${spacing.sm}`,
        borderRadius: radius.lg,
        cursor: "pointer",
        display: "inline-flex",
        alignItems: "center",
        minWidth: "180px",
        gap: spacing.sm,
        boxSizing: "border-box",
        WebkitTapHighlightColor: "transparent",
        lineHeight: "normal",
        animation: `${fadeInAnimation} 300ms ease`,
        [media.mobile]: {
            gap: spacing.sm,
            padding: `${spacing.xs} ${spacing.sm}`,
            img: {
                width: `${iconSize.md}px`,
                height: `${iconSize.md}px`,
            },
        },
        "&:hover": {
            transition: "background 250ms ease",
            background: theme.colors.connectedButtonBgHover,
        },
    };
});
const StyledChevronRightIcon = /* @__PURE__ */ styled(
/* @__PURE__ */ ChevronRightIcon)(() => {
    const theme = useCustomTheme();
    return {
        color: theme.colors.secondaryText,
    };
});
function ConnectedToSmartWallet(props) {
    const activeAccount = useActiveAccount();
    const activeWallet = useActiveWallet();
    const isSmartWallet = hasSmartAccount(activeWallet);
    const chain = useActiveWalletChain();
    const { client, connectLocale: locale } = props;
    const [isSmartWalletDeployed, setIsSmartWalletDeployed] = useState(false);
    useEffect(() => {
        if (activeAccount && isSmartWallet && activeAccount.address && chain) {
            const contract = getContract({
                address: activeAccount.address,
                chain,
                client,
            });
            isContractDeployed(contract).then((isDeployed) => {
                setIsSmartWalletDeployed(isDeployed);
            });
        }
        else {
            setIsSmartWalletDeployed(false);
        }
    }, [activeAccount, chain, client, isSmartWallet]);
    const content = (_jsxs(Container, { flex: "row", bg: "secondaryButtonBg", gap: "xxs", style: {
            borderRadius: radius.md,
            padding: `${spacing.xxs} ${spacing.sm} ${spacing.xxs} ${spacing.xs}`,
        }, center: "y", children: [_jsx(Container, { flex: "row", color: "accentText", center: "both", children: _jsx(SmartWalletBadgeIcon, { size: iconSize.xs }) }), _jsx(Text, { size: "xs", color: "secondaryButtonText", children: locale.connectedToSmartWallet })] }));
    if (chain && activeAccount && isSmartWallet) {
        return (_jsxs(_Fragment, { children: [isSmartWalletDeployed ? (_jsx(Link, { color: "secondaryText", hoverColor: "primaryText", href: `https://thirdweb.com/${chain.id}/${activeAccount.address}/account`, target: "_blank", size: "sm", children: content })) : (_jsxs(Text, { size: "sm", children: [" ", content] })), _jsx(Spacer, { y: "xs" })] }));
    }
    return null;
}
function InAppWalletUserInfo(props) {
    const { client } = props;
    const account = useActiveAccount();
    const userInfoQuery = useQuery({
        queryKey: ["in-app-wallet-user", client, account?.address],
        queryFn: async () => {
            const { getUserEmail, getUserPhoneNumber } = await import("../../../../wallets/in-app/web/lib/auth/index.js");
            const [email, phone] = await Promise.all([
                getUserEmail({
                    client: client,
                }),
                getUserPhoneNumber({
                    client: client,
                }),
            ]);
            return email || phone || null;
        },
    });
    if (userInfoQuery.data) {
        return (_jsx(Container, { flex: "row", center: "x", style: {
                paddingBottom: spacing.xs,
            }, children: _jsx(Text, { size: "sm", children: userInfoQuery.data }) }));
    }
    return null;
}
/**
 * @internal
 */
function SwitchNetworkButton(props) {
    const switchChain = useSwitchActiveWalletChain();
    const [switching, setSwitching] = useState(false);
    const locale = props.connectLocale;
    const switchNetworkBtnTitle = props.switchNetworkBtnTitle ?? locale.switchNetwork;
    return (_jsx(Button, { className: `tw-connect-wallet--switch-network ${props.className || ""}`, variant: "primary", type: "button", "data-is-loading": switching, "data-test": "switch-network-button", disabled: switching, onClick: async () => {
            setSwitching(true);
            try {
                await switchChain(props.targetChain);
            }
            catch (e) {
                console.error(e);
            }
            setSwitching(false);
        }, style: {
            minWidth: "140px",
            ...props.style,
        }, "aria-label": switching ? locale.switchingNetwork : undefined, children: switching ? (_jsx(Spinner, { size: "sm", color: "primaryButtonText" })) : (switchNetworkBtnTitle) }));
}
/**
 * Hook to open the Wallet Details Modal that shows various information about the connected wallet and allows users to perform various actions like sending funds, receiving funds, switching networks, Buying tokens, etc.
 *
 * @example
 * ```tsx
 * import { createThirdwebClient } from "thirdweb";
 * import { useWalletDetailsModal } from "thirdweb/react";
 *
 * const client = createThirdwebClient({
 *  clientId: "<your_client_id>",
 * });
 *
 * function Example() {
 *   const detailsModal = useWalletDetailsModal();
 *
 *   function handleClick() {
 *      detailsModal.open({ client, theme: 'light' });
 *   }
 *
 *   return <button onClick={handleClick}> Show Wallet Details </button>
 * }
 * ```
 * @wallet
 */
export function useWalletDetailsModal() {
    const account = useActiveAccount();
    const setRootEl = useContext(SetRootElementContext);
    function closeModal() {
        setRootEl(null);
    }
    function openModal(props) {
        if (!account) {
            throw new Error("Wallet is not connected.");
        }
        getConnectLocale(props.locale || "en_US")
            .then((locale) => {
            setRootEl(_jsx(DetailsModal, { client: props.client, locale: locale, detailsModal: {
                    footer: props.footer,
                    hideDisconnect: props.hideDisconnect,
                    networkSelector: props.networkSelector,
                    payOptions: props.payOptions,
                    showTestnetFaucet: props.showTestnetFaucet,
                }, displayBalanceToken: props.displayBalanceToken, theme: props.theme || "dark", supportedTokens: props.supportedTokens, closeModal: closeModal, onDisconnect: (info) => {
                    props.onDisconnect?.(info);
                    closeModal();
                }, chains: props.chains || [] }));
        })
            .catch(() => {
            closeModal();
        });
    }
    return {
        open: openModal,
    };
}
//# sourceMappingURL=Details.js.map