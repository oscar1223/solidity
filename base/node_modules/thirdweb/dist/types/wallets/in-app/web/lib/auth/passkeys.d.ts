import type { AuthType } from "@passwordless-id/webauthn/dist/esm/types.js";
import type { ThirdwebClient } from "../../../../../client/client.js";
import type { EcosystemWalletId } from "../../../../wallet-types.js";
import type { AuthStoredTokenWithCookieReturnType } from "../../../core/authentication/type.js";
import type { Ecosystem } from "../../types.js";
export declare function registerPasskey(options: {
    client: ThirdwebClient;
    ecosystem?: Ecosystem;
    authenticatorType?: AuthType;
    username?: string;
}): Promise<AuthStoredTokenWithCookieReturnType>;
export declare function loginWithPasskey(options: {
    client: ThirdwebClient;
    ecosystem?: Ecosystem;
    authenticatorType?: AuthType;
}): Promise<AuthStoredTokenWithCookieReturnType>;
/**
 * Returns whether this device has a stored passkey ready to be used for sign-in
 * @param client - the thirdweb client
 * @returns whether the device has a stored passkey
 * @walletUtils
 */
export declare function hasStoredPasskey(client: ThirdwebClient, ecosystemId?: EcosystemWalletId): Promise<boolean>;
//# sourceMappingURL=passkeys.d.ts.map