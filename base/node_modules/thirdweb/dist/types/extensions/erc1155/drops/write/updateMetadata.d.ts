import { type UpdateBatchBaseURIParams } from "../../__generated__/DropERC1155/write/updateBatchBaseURI.js";
import type { ThirdwebClient } from "../../../../client/client.js";
import type { BaseTransactionOptions } from "../../../../transaction/types.js";
import type { NFTInput } from "../../../../utils/nft/parseNft.js";
export type UpdateMetadataParams = {
    targetTokenId: bigint;
    newMetadata: NFTInput;
    client: ThirdwebClient;
};
/**
 * @internal
 */
export declare function getUpdateMetadataParams(options: BaseTransactionOptions<UpdateMetadataParams>): Promise<UpdateBatchBaseURIParams>;
/**
 * Update the metadata of the single token in an Edition Drop (DropERC1155) collection
 * For Edition contracts, use `setTokenURI`
 * @param options
 * @returns the prepared transaction
 * @extension ERC1155
 * @example
 * ```ts
 * import { updateMetadata } from "thirdweb/extensions/erc1155";
 * import { sendTransaction } from "thirdweb";
 *
 * const transaction = updateMetadata({
 *  contract,
 *  targetTokenId: 0n,
 *  newMetadata: {
 *    name: "this is the new nft name",
 *    description: "...",
 *    image: "new image uri"
 *    // ...
 *  }
 * });
 *
 * await sendTransaction({ transaction, account });
 * ```
 */
export declare function updateMetadata(options: BaseTransactionOptions<UpdateMetadataParams>): import("../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=updateMetadata.d.ts.map