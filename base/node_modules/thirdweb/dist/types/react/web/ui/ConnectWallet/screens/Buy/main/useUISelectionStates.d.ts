import type { PayUIOptions } from "../../../../../../core/hooks/connection/ConnectButtonProps.js";
import { type ERC20OrNativeToken } from "../../nativeToken.js";
import type { SupportedChainAndTokens } from "../swap/useSwapSupportedChains.js";
import type { BuyForTx } from "./types.js";
export declare function useUISelectionStates(options: {
    payOptions: PayUIOptions;
    buyForTx?: BuyForTx;
    supportedDestinations: SupportedChainAndTokens;
}): {
    tokenAmount: string;
    setTokenAmount: import("react").Dispatch<import("react").SetStateAction<string>>;
    toChain: {
        readonly id: number;
        readonly name?: string;
        readonly rpc: string;
        readonly icon?: {
            url: string;
            width: number;
            height: number;
            format: string;
        };
        readonly nativeCurrency?: {
            name?: string;
            symbol?: string;
            decimals?: number;
        };
        readonly blockExplorers?: Array<{
            name: string;
            url: string;
            apiUrl?: string;
        }>;
        readonly testnet?: true;
        readonly experimental?: {
            increaseZeroByteCount?: boolean;
        };
        readonly faucets?: Array<string>;
    };
    setToChain: import("react").Dispatch<import("react").SetStateAction<{
        readonly id: number;
        readonly name?: string;
        readonly rpc: string;
        readonly icon?: {
            url: string;
            width: number;
            height: number;
            format: string;
        };
        readonly nativeCurrency?: {
            name?: string;
            symbol?: string;
            decimals?: number;
        };
        readonly blockExplorers?: Array<{
            name: string;
            url: string;
            apiUrl?: string;
        }>;
        readonly testnet?: true;
        readonly experimental?: {
            increaseZeroByteCount?: boolean;
        };
        readonly faucets?: Array<string>;
    }>>;
    deferredTokenAmount: string;
    fromChain: {
        readonly id: number;
        readonly name?: string;
        readonly rpc: string;
        readonly icon?: {
            url: string;
            width: number;
            height: number;
            format: string;
        };
        readonly nativeCurrency?: {
            name?: string;
            symbol?: string;
            decimals?: number;
        };
        readonly blockExplorers?: Array<{
            name: string;
            url: string;
            apiUrl?: string;
        }>;
        readonly testnet?: true;
        readonly experimental?: {
            increaseZeroByteCount?: boolean;
        };
        readonly faucets?: Array<string>;
    };
    setFromChain: import("react").Dispatch<import("react").SetStateAction<{
        readonly id: number;
        readonly name?: string;
        readonly rpc: string;
        readonly icon?: {
            url: string;
            width: number;
            height: number;
            format: string;
        };
        readonly nativeCurrency?: {
            name?: string;
            symbol?: string;
            decimals?: number;
        };
        readonly blockExplorers?: Array<{
            name: string;
            url: string;
            apiUrl?: string;
        }>;
        readonly testnet?: true;
        readonly experimental?: {
            increaseZeroByteCount?: boolean;
        };
        readonly faucets?: Array<string>;
    }>>;
    toToken: ERC20OrNativeToken;
    setToToken: import("react").Dispatch<import("react").SetStateAction<ERC20OrNativeToken>>;
    fromToken: ERC20OrNativeToken;
    setFromToken: import("react").Dispatch<import("react").SetStateAction<ERC20OrNativeToken>>;
    selectedCurrency: import("../fiat/currencies.js").CurrencyMeta;
    setSelectedCurrency: import("react").Dispatch<import("react").SetStateAction<import("../fiat/currencies.js").CurrencyMeta>>;
};
//# sourceMappingURL=useUISelectionStates.d.ts.map