"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalStorage = void 0;
const settings_js_1 = require("../../../core/constants/settings.js");
const data = new Map();
/**
 * @internal
 */
class LocalStorage {
    /**
     * @internal
     */
    constructor({ clientId, ecosystemId, }) {
        Object.defineProperty(this, "isSupported", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "key", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.isSupported = typeof window !== "undefined" && !!window.localStorage;
        this.key = getLocalStorageKey(clientId, ecosystemId);
    }
    async getItem(key) {
        if (this.isSupported) {
            return window.localStorage.getItem(key);
        }
        return data.get(key) ?? null;
    }
    async setItem(key, value) {
        if (this.isSupported) {
            return window.localStorage.setItem(key, value);
        }
        data.set(key, value);
    }
    async removeItem(key) {
        const item = await this.getItem(key);
        if (this.isSupported && item) {
            window.localStorage.removeItem(key);
            return true;
        }
        return false;
    }
    /**
     * @internal
     */
    async getWalletConnectSessions() {
        return this.getItem((0, settings_js_1.WALLET_CONNECT_SESSIONS_LOCAL_STORAGE_NAME)(this.key));
    }
    /**
     * @internal
     */
    async saveWalletConnectSessions(stringifiedSessions) {
        await this.setItem((0, settings_js_1.WALLET_CONNECT_SESSIONS_LOCAL_STORAGE_NAME)(this.key), stringifiedSessions);
    }
    /**
     * @internal
     */
    async savePasskeyCredentialId(id) {
        await this.setItem((0, settings_js_1.PASSKEY_CREDENTIAL_ID_LOCAL_STORAGE_NAME)(this.key), id);
    }
    /**
     * @internal
     */
    async getPasskeyCredentialId() {
        return this.getItem((0, settings_js_1.PASSKEY_CREDENTIAL_ID_LOCAL_STORAGE_NAME)(this.key));
    }
    /**
     * @internal
     */
    async saveAuthCookie(cookie) {
        await this.setItem((0, settings_js_1.AUTH_TOKEN_LOCAL_STORAGE_NAME)(this.key), cookie);
    }
    /**
     * @internal
     */
    async getAuthCookie() {
        return this.getItem((0, settings_js_1.AUTH_TOKEN_LOCAL_STORAGE_NAME)(this.key));
    }
    /**
     * @internal
     */
    async removeAuthCookie() {
        return this.removeItem((0, settings_js_1.AUTH_TOKEN_LOCAL_STORAGE_NAME)(this.key));
    }
    /**
     * @internal
     */
    async saveDeviceShare(share, userId) {
        await this.saveWalletUserId(userId);
        await this.setItem((0, settings_js_1.DEVICE_SHARE_LOCAL_STORAGE_NAME)(this.key, userId), share);
    }
    /**
     * @internal
     */
    async getDeviceShare() {
        const userId = await this.getWalletUserId();
        if (userId) {
            return this.getItem((0, settings_js_1.DEVICE_SHARE_LOCAL_STORAGE_NAME)(this.key, userId));
        }
        return null;
    }
    /**
     * @internal
     */
    async removeDeviceShare() {
        const userId = await this.getWalletUserId();
        if (userId) {
            return this.removeItem((0, settings_js_1.DEVICE_SHARE_LOCAL_STORAGE_NAME)(this.key, userId));
        }
        return false;
    }
    /**
     * @internal
     */
    async getWalletUserId() {
        return this.getItem((0, settings_js_1.WALLET_USER_ID_LOCAL_STORAGE_NAME)(this.key));
    }
    /**
     * @internal
     */
    async saveWalletUserId(userId) {
        await this.setItem((0, settings_js_1.WALLET_USER_ID_LOCAL_STORAGE_NAME)(this.key), userId);
    }
    /**
     * @internal
     */
    async removeWalletUserId() {
        return this.removeItem((0, settings_js_1.WALLET_USER_ID_LOCAL_STORAGE_NAME)(this.key));
    }
}
exports.LocalStorage = LocalStorage;
const getLocalStorageKey = (clientId, ecosystemId) => {
    return `${clientId}${ecosystemId ? `-${ecosystemId}` : ""}`;
};
//# sourceMappingURL=LocalStorage.js.map