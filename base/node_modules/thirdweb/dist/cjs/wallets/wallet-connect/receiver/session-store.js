"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.walletConnectSessions = void 0;
exports.getSessions = getSessions;
exports.initializeSessionStore = initializeSessionStore;
exports.saveSession = saveSession;
exports.removeSession = removeSession;
exports.setWalletConnectSessions = setWalletConnectSessions;
const LocalStorage_js_1 = require("../../in-app/web/utils/Storage/LocalStorage.js");
/**
 * @internal
 */
async function getSessions() {
    if (!exports.walletConnectSessions) {
        return [];
    }
    const stringifiedSessions = await exports.walletConnectSessions.getWalletConnectSessions();
    return JSON.parse(stringifiedSessions ?? "[]");
}
/**
 * @internal
 */
function initializeSessionStore(options) {
    if (!exports.walletConnectSessions) {
        exports.walletConnectSessions = new LocalStorage_js_1.LocalStorage({
            clientId: options.clientId,
        });
    }
}
/**
 * @internal
 */
async function saveSession(session) {
    if (!exports.walletConnectSessions) {
        return;
    }
    const stringifiedSessions = await exports.walletConnectSessions.getWalletConnectSessions();
    const sessions = JSON.parse(stringifiedSessions ?? "[]");
    sessions.push(session);
    await exports.walletConnectSessions.saveWalletConnectSessions(JSON.stringify(sessions));
}
/**
 * @internal
 */
async function removeSession(session) {
    if (!exports.walletConnectSessions) {
        return;
    }
    const stringifiedSessions = await exports.walletConnectSessions.getWalletConnectSessions();
    const sessions = JSON.parse(stringifiedSessions ?? "[]");
    const newSessions = sessions.filter((s) => s.topic !== session.topic);
    await exports.walletConnectSessions.saveWalletConnectSessions(JSON.stringify(newSessions));
}
/**
 * @internal FOR TESTING ONLY
 */
function setWalletConnectSessions(storage) {
    exports.walletConnectSessions = storage;
}
//# sourceMappingURL=session-store.js.map