"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletImage = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_query_1 = require("@tanstack/react-query");
const nativeStorage_js_1 = require("../../../../utils/storage/nativeStorage.js");
const getWalletInfo_js_1 = require("../../../../wallets/__generated__/getWalletInfo.js");
const index_js_1 = require("../../../../wallets/manager/index.js");
const storage_js_1 = require("../../../core/utils/storage.js");
const svgs_js_1 = require("../icons/svgs.js");
const RNImage_js_1 = require("./RNImage.js");
const WalletImage = (props) => {
    const { wallet, ensAvatar, size } = props;
    const { data: imageData } = (0, react_query_1.useQuery)({
        queryKey: ["wallet-image", wallet.id, wallet.getAccount()?.address],
        queryFn: async () => {
            let activeEOAId = wallet.id;
            if (wallet.id === "smart") {
                // TODO (rn) investigate why the first render this returns null from storage
                const storedId = await (0, index_js_1.getStoredActiveWalletId)(nativeStorage_js_1.nativeLocalStorage);
                if (storedId) {
                    activeEOAId = storedId;
                }
                else {
                    throw new Error("No active EOA wallet");
                }
            }
            let imageData;
            if (activeEOAId === "inApp" &&
                (wallet.id === "inApp" || wallet.id === "smart")) {
                const lastAuthProvider = await (0, storage_js_1.getLastAuthProvider)(nativeStorage_js_1.nativeLocalStorage);
                switch (lastAuthProvider) {
                    case "phone":
                        imageData = svgs_js_1.PHONE_ICON;
                        break;
                    case "email":
                        imageData = svgs_js_1.EMAIL_ICON;
                        break;
                    case "google":
                        imageData = svgs_js_1.GOOGLE_ICON;
                        break;
                    case "apple":
                        imageData = svgs_js_1.APPLE_ICON;
                        break;
                    case "facebook":
                        imageData = svgs_js_1.FACEBOOK_ICON;
                        break;
                    default:
                        imageData = svgs_js_1.WALLET_ICON;
                        break;
                }
                return imageData;
            }
            try {
                const externalWalletImage = await (0, getWalletInfo_js_1.getWalletInfo)(activeEOAId, true);
                if (externalWalletImage) {
                    return externalWalletImage;
                }
            }
            catch { }
            return svgs_js_1.WALLET_ICON;
        },
        enabled: !ensAvatar,
    });
    const data = ensAvatar || imageData || svgs_js_1.WALLET_ICON;
    return (0, jsx_runtime_1.jsx)(RNImage_js_1.RNImage, { theme: props.theme, data: data, size: size });
};
exports.WalletImage = WalletImage;
//# sourceMappingURL=WalletImage.js.map