"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RNImage = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_native_1 = require("react-native");
const react_native_svg_1 = require("react-native-svg");
const index_js_1 = require("../../design-system/index.js");
const Skeleton_js_1 = require("./Skeleton.js");
function getImage(data) {
    if (data.startsWith("data:image/svg+xml;base64,")) {
        const image = globalThis.atob(data.replace("data:image/svg+xml;base64,", ""));
        return { image, type: "xml" };
    }
    if (data.startsWith("data:image/")) {
        return { image: data, type: "image" };
    }
    if (data.startsWith("<svg")) {
        return { image: data, type: "xml" };
    }
    return { image: data, type: "url" };
}
const RNImage = (props) => {
    const { data, size, color, placeholder } = props;
    const [loading, setLoading] = (0, react_1.useState)(true);
    if (!data) {
        return null;
    }
    const { image, type } = (0, react_1.useMemo)(() => getImage(data), [data]);
    switch (type) {
        case "url":
        case "image":
            return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [loading && ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { theme: props.theme, style: { width: size, height: size } })), (0, jsx_runtime_1.jsx)(react_native_1.Image, { source: { uri: image }, loadingIndicatorSource: { uri: placeholder }, width: size, height: size, onLoadStart: () => setLoading(true), onLoadEnd: () => setLoading(false), style: [
                            { borderRadius: index_js_1.radius.md, display: loading ? "none" : "flex" },
                        ] })] }));
        case "xml":
            return (0, jsx_runtime_1.jsx)(react_native_svg_1.SvgXml, { xml: image, width: size, height: size, color: color });
        default:
            return null;
    }
};
exports.RNImage = RNImage;
//# sourceMappingURL=RNImage.js.map