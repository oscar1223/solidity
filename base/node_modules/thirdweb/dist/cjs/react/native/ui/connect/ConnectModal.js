"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectEmbed = ConnectEmbed;
exports.ConnectModal = ConnectModal;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_native_1 = require("react-native");
const react_native_svg_1 = require("react-native-svg");
const CustomThemeProvider_js_1 = require("../../../core/design-system/CustomThemeProvider.js");
const socialIcons_js_1 = require("../../../core/utils/socialIcons.js");
const index_js_1 = require("../../design-system/index.js");
const useActiveWallet_js_1 = require("../../hooks/wallets/useActiveWallet.js");
const useConnect_js_1 = require("../../hooks/wallets/useConnect.js");
const defaultWallets_js_1 = require("../../wallets/defaultWallets.js");
const Header_js_1 = require("../components/Header.js");
const button_js_1 = require("../components/button.js");
const spacer_js_1 = require("../components/spacer.js");
const text_js_1 = require("../components/text.js");
const view_js_1 = require("../components/view.js");
const svgs_js_1 = require("../icons/svgs.js");
const ExternalWalletsList_js_1 = require("./ExternalWalletsList.js");
const InAppWalletUI_js_1 = require("./InAppWalletUI.js");
/**
 * A component that allows the user to connect their wallet.
 *
 * it renders the same UI as the [`ConnectButton`](https://portal.thirdweb.com/react/v4/components/ConnectButton) component's modal - but directly on the page instead of being in a modal.
 *
 * It only renders UI if wallet is not connected
 * @example
 * ```tsx
 * <ConnectEmbed
 *    client={client}
 * />
 * ```
 * @param props -
 * The props for the `ConnectEmbed` component.
 *
 * Refer to the [`ConnectEmbedProps`](https://portal.thirdweb.com/references/typescript/v5/ConnectEmbedProps) type for more details
 * @component
 */
function ConnectEmbed(props) {
    const theme = (0, CustomThemeProvider_js_1.parseTheme)(props.theme);
    const wallet = (0, useActiveWallet_js_1.useActiveWallet)();
    const adaptedProps = {
        ...props,
        connectModal: { ...props },
    };
    return wallet ? null : ((0, jsx_runtime_1.jsx)(ConnectModal, { ...adaptedProps, theme: theme, containerType: "embed" }));
}
function ConnectModal(props) {
    const { theme, client, containerType, accountAbstraction, onConnect } = props;
    const connectMutation = (0, useConnect_js_1.useConnect)({
        client,
        accountAbstraction,
        onConnect: (wallet) => {
            props.onClose?.();
            onConnect?.(wallet);
        },
    });
    const wallets = props.wallets || (0, defaultWallets_js_1.getDefaultWallets)(props);
    const [modalState, setModalState] = (0, react_1.useState)({ screen: "base" });
    const inAppWallet = wallets.find((wallet) => wallet.id === "inApp");
    const externalWallets = wallets.filter((wallet) => wallet.id !== "inApp");
    const showBranding = props.connectModal?.showThirdwebBranding !== false;
    let content;
    switch (modalState.screen) {
        case "otp": {
            content = ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Header_js_1.Header, { theme: theme, onClose: props.onClose, containerType: containerType, onBack: () => setModalState({ screen: "base" }) }), (0, jsx_runtime_1.jsx)(spacer_js_1.Spacer, { size: "xl" }), (0, jsx_runtime_1.jsx)(react_native_1.View, { style: {
                            flexDirection: "column",
                            gap: index_js_1.spacing.md,
                            paddingHorizontal: containerType === "modal" ? index_js_1.spacing.lg : 0,
                        }, children: (0, jsx_runtime_1.jsx)(InAppWalletUI_js_1.OtpLogin, { auth: modalState.auth, wallet: modalState.wallet, client: client, setScreen: setModalState, theme: theme, connectMutation: connectMutation }) }), containerType === "modal" ? ((0, jsx_runtime_1.jsx)(react_native_1.View, { style: { flex: 1 } })) : ((0, jsx_runtime_1.jsx)(spacer_js_1.Spacer, { size: "md" }))] }));
            break;
        }
        case "external_wallets": {
            content = ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Header_js_1.Header, { theme: theme, onClose: props.onClose, containerType: containerType, onBack: () => setModalState({ screen: "base" }) }), (0, jsx_runtime_1.jsx)(spacer_js_1.Spacer, { size: "lg" }), (0, jsx_runtime_1.jsx)(ExternalWalletsList_js_1.ExternalWalletsList, { theme: theme, externalWallets: externalWallets, client: client, connectMutation: connectMutation, containerType: containerType })] }));
            break;
        }
        default: {
            content = ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Header_js_1.Header, { theme: theme, onClose: props.onClose, containerType: containerType }), inAppWallet ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [containerType === "modal" ? ((0, jsx_runtime_1.jsx)(react_native_1.View, { style: { flex: 1 } })) : ((0, jsx_runtime_1.jsx)(spacer_js_1.Spacer, { size: "lg" })), (0, jsx_runtime_1.jsxs)(react_native_1.View, { style: {
                                    flexDirection: "column",
                                    gap: index_js_1.spacing.md,
                                    paddingHorizontal: containerType === "modal" ? index_js_1.spacing.lg : 0,
                                }, children: [(0, jsx_runtime_1.jsx)(InAppWalletUI_js_1.InAppWalletUI, { wallet: inAppWallet, setScreen: setModalState, client: client, theme: theme, connectMutation: connectMutation }), externalWallets.length > 0 ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(OrDivider, { theme: theme }), (0, jsx_runtime_1.jsx)(button_js_1.ThemedButtonWithIcon, { theme: theme, icon: socialIcons_js_1.genericWalletIcon, title: "Connect a wallet", onPress: () => setModalState({ screen: "external_wallets" }) })] })) : null] }), containerType === "modal" ? ((0, jsx_runtime_1.jsx)(react_native_1.View, { style: { flex: 1 } })) : ((0, jsx_runtime_1.jsx)(spacer_js_1.Spacer, { size: "md" }))] })) : externalWallets.length > 0 ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(spacer_js_1.Spacer, { size: "lg" }), (0, jsx_runtime_1.jsx)(react_native_1.View, { style: {
                                    flex: 1,
                                }, children: (0, jsx_runtime_1.jsx)(ExternalWalletsList_js_1.ExternalWalletsList, { theme: theme, externalWallets: externalWallets, client: client, connectMutation: connectMutation, containerType: containerType }) })] })) : null] }));
        }
    }
    return ((0, jsx_runtime_1.jsxs)(view_js_1.ThemedView, { theme: theme, style: containerType === "modal"
            ? styles.modalContainer
            : styles.embedContainer, children: [content, showBranding && (0, jsx_runtime_1.jsx)(PoweredByThirdweb, { theme: theme })] }));
}
function OrDivider({ theme }) {
    return ((0, jsx_runtime_1.jsxs)(react_native_1.View, { style: {
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "center",
            gap: index_js_1.spacing.lg,
        }, children: [(0, jsx_runtime_1.jsx)(react_native_1.View, { style: {
                    flex: 1,
                    height: 1,
                    backgroundColor: theme.colors.borderColor,
                } }), (0, jsx_runtime_1.jsx)(text_js_1.ThemedText, { theme: theme, style: { color: theme.colors.secondaryText }, children: "OR" }), (0, jsx_runtime_1.jsx)(react_native_1.View, { style: {
                    flex: 1,
                    height: 1,
                    backgroundColor: theme.colors.borderColor,
                } })] }));
}
function PoweredByThirdweb({ theme }) {
    return ((0, jsx_runtime_1.jsxs)(react_native_1.View, { style: {
            flexDirection: "row",
            justifyContent: "center",
            alignItems: "center",
            gap: index_js_1.spacing.xs,
            paddingBottom: react_native_1.Platform.OS === "android" ? index_js_1.spacing.md : index_js_1.spacing.lg,
        }, children: [(0, jsx_runtime_1.jsx)(text_js_1.ThemedText, { theme: theme, type: "subtext", children: "Powered by" }), (0, jsx_runtime_1.jsx)(react_native_svg_1.SvgXml, { xml: svgs_js_1.TW_ICON, width: 22, height: 22, style: { marginBottom: -2 }, color: theme.colors.secondaryText }), (0, jsx_runtime_1.jsx)(text_js_1.ThemedText, { theme: theme, type: "subtext", style: { fontWeight: "600" }, children: "thirdweb" })] }));
}
const styles = react_native_1.StyleSheet.create({
    modalContainer: {
        flex: 1,
        width: "100%",
        flexDirection: "column",
        borderTopLeftRadius: index_js_1.radius.lg,
        borderTopRightRadius: index_js_1.radius.lg,
    },
    embedContainer: {
        flex: 1,
        width: "100%",
        flexDirection: "column",
        backgroundColor: "transparent",
    },
});
//# sourceMappingURL=ConnectModal.js.map