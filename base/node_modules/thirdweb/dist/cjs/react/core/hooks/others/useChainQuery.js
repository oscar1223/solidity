"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useChainName = useChainName;
exports.useChainIconUrl = useChainIconUrl;
exports.useChainFaucets = useChainFaucets;
exports.useChainSymbol = useChainSymbol;
exports.useChainExplorers = useChainExplorers;
const react_query_1 = require("@tanstack/react-query");
const utils_js_1 = require("../../../../chains/utils.js");
function useChainName(chain) {
    // only if we have a chain and no chain name!
    const isEnabled = !!chain && !chain.name;
    const chainQuery = (0, react_query_1.useQuery)({
        queryKey: ["chain", chain?.id],
        enabled: isEnabled,
        retry: false,
        // 1 hour
        staleTime: 60 * 60 * 1000,
        queryFn: async () => {
            if (!chain) {
                throw new Error("chain is required");
            }
            return (0, utils_js_1.convertApiChainToChain)(await (0, utils_js_1.getChainMetadata)(chain));
        },
    });
    return {
        name: chain?.name ?? chainQuery.data?.name,
        isLoading: isEnabled && chainQuery.isLoading,
    };
}
function useChainIconUrl(chain) {
    // only if we have a chain and no chain icon url!
    const isEnabled = !!chain && !chain.icon?.url;
    const chainQuery = (0, react_query_1.useQuery)({
        queryKey: ["chain", chain?.id],
        // only if we have a chain and no chain icon url!
        enabled: isEnabled,
        retry: false,
        // 1 hour
        staleTime: 60 * 60 * 1000,
        queryFn: async () => {
            if (!chain) {
                throw new Error("chain is required");
            }
            return (0, utils_js_1.convertApiChainToChain)(await (0, utils_js_1.getChainMetadata)(chain));
        },
    });
    return {
        url: chain?.icon?.url ?? chainQuery.data?.icon?.url,
        isLoading: isEnabled && chainQuery.isLoading,
    };
}
function useChainFaucets(chain) {
    // only if we have a chain and it might be a testnet and no faucets and its not localhost
    const isEnabled = !!chain &&
        "testnet" in chain &&
        !chain.faucets?.length &&
        chain.id !== 1337;
    const chainQuery = (0, react_query_1.useQuery)({
        queryKey: ["chain", chain?.id],
        enabled: isEnabled,
        retry: false,
        // 1 hour
        staleTime: 60 * 60 * 1000,
        queryFn: async () => {
            if (!chain) {
                throw new Error("chain is required");
            }
            return (0, utils_js_1.convertApiChainToChain)(await (0, utils_js_1.getChainMetadata)(chain));
        },
    });
    return {
        faucets: chain?.faucets ?? chainQuery.data?.faucets ?? [],
        isLoading: isEnabled && chainQuery.isLoading,
    };
}
function useChainSymbol(chain) {
    // only if we have a chain and no chain icon url!
    const isEnabled = !!chain && !chain.nativeCurrency?.symbol;
    const chainQuery = (0, react_query_1.useQuery)({
        queryKey: ["chain", chain?.id],
        // only if we have a chain and no chain icon url!
        enabled: isEnabled,
        retry: false,
        // 1 hour
        staleTime: 60 * 60 * 1000,
        queryFn: async () => {
            if (!chain) {
                throw new Error("chain is required");
            }
            return (0, utils_js_1.convertApiChainToChain)(await (0, utils_js_1.getChainMetadata)(chain));
        },
    });
    return {
        symbol: chain?.nativeCurrency?.symbol ?? chainQuery.data?.nativeCurrency?.symbol,
        isLoading: isEnabled && chainQuery.isLoading,
    };
}
function useChainExplorers(chain) {
    // only if we have a chain and it might be a testnet and no faucets and its not localhost
    const isEnabled = !!chain && !chain.blockExplorers?.length;
    const chainQuery = (0, react_query_1.useQuery)({
        queryKey: ["chain", chain?.id],
        enabled: isEnabled,
        retry: false,
        // 1 hour
        staleTime: 60 * 60 * 1000,
        queryFn: async () => {
            if (!chain) {
                throw new Error("chain is required");
            }
            return (0, utils_js_1.convertApiChainToChain)(await (0, utils_js_1.getChainMetadata)(chain));
        },
    });
    return {
        explorers: chain?.blockExplorers ?? chainQuery.data?.blockExplorers ?? [],
        isLoading: isEnabled && chainQuery.isLoading,
    };
}
//# sourceMappingURL=useChainQuery.js.map